package com.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.hidcom.GetCommand;
import com.hidcom.GetCommands;
import com.sendProtocol.SendProtocol;
import com.server.PIPException;

import information.DeviceSettingInfo;

/**
 * @author Frank
 *
 */
public class Commander {
	
	private static final Logger logger = Logger.getLogger("com.server");
	private String host;
	private int port;
	
	/**
	 * Instantiates a Commander instance including the corresponding Server's hostname (IP or DNS)
	 * and the communication port (to be set in the Server class).
	 * 
	 * @param host Host on which the server resides.
	 * @param port TCP port on which the server listens.
	 */
	public Commander(String host, int port) {
		this.host = host;
		this.port = port;
	}
	
	/**
	 * Send a generated pip command to the server.
	 * 
	 * @param cmd Command generated by GetCommand or SetCommand
	 * @return byte[] containing requested PIP answer
	 */
	public byte[] sendCmd(byte[] cmd) {
		
		final long duration = System.currentTimeMillis();
		
		try (final Socket socketServer = new Socket(host, port)){
			
			DataOutputStream serverInput = null;
			
			try {
				serverInput = new DataOutputStream(socketServer.getOutputStream());

				logger.fine("Client-input: " + new String(cmd, StandardCharsets.US_ASCII));

				// To the server:
				serverInput.writeInt(cmd.length);
				serverInput.write(cmd);
				serverInput.flush();

				logger.fine("Waiting for server answer...");
				DataInputStream pipInput = new DataInputStream(socketServer.getInputStream());
				logger.fine("Input from server...");
				final byte[] result = new byte[300];
				
				int tmp;
				int c = 0;
				
				while(!SendProtocol.isLast(tmp = pipInput.readByte())) {
					result[c] = (byte) tmp;
					c++;
				}
				
				logger.info("Answer received!");
				
				logger.fine(new String(result, StandardCharsets.US_ASCII));
				
				logger.log(Level.INFO, "Execution time in Milliseconds: " + Long.toString((System.currentTimeMillis() - duration)));

				return result;
			} catch (IOException e) {
				
				logger.log(Level.SEVERE, "Clientsocket has probably been closed due to a server side timeout!" + 
						" This is normal when restarting the server while running. Check the server logs" + 
						" if this message appears too often.", e);
			}
			
		} catch (UnknownHostException ex) {
			logger.severe("The host you want to connect to is not known! " + ex.getMessage());
			System.exit(-1);
		} catch (IOException ex) {
			logger.severe("IOException during connection: " + ex.getMessage());
			System.exit(-1);
		}
		
		return null;
		
		
	}
	
	public static void main(String[] args) {
		Commander c = new Commander("raspberrypi", 13000);
		GetCommand g = GetCommands.ANZEIGE_BETRIEBSKONSTANTEN;
		
		DeviceSettingInfo ds = new DeviceSettingInfo(c.sendCmd(g.cmd()));
		try {
			ds.parseValues();
		} catch (PIPException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println(ds.DEVICE_OUTPUT_SOURCE_PRIORITY);	
	}
}